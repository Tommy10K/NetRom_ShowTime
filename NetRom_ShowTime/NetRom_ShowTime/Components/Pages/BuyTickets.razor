@page "/buytickets/{FestivalId:int}"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using NetRom_ShowTime.Components
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject IFestivalService FestivalService
@inject ITicketService TicketService
@inject IBookingService BookingService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@inject NavigationManager Nav

@rendermode InteractiveServer

@attribute [Authorize(Roles = "User")]

@if (!ticketTypes.Any())
{
    <p>No tickets available for purchase yet.</p>
}
else
{
    <div class="row">
        @foreach (var ticket in ticketTypes)
        {
            <div class="col-sm-6 col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@ticket.Name</h5>
                        <p class="card-text"><strong>Price:</strong> @ticket.Price.ToString("C")</p>

                        <label for="qty-@ticket.Id" class="form-label">Quantity</label>
                        <input type="number"
                               class="form-control"
                               min="0"
                               max="@remainingAllowed"
                               @bind="quantities[ticket.Id]"
                               @bind:event="oninput" />
                    </div>
                </div>
            </div>
        }
    </div>

    <p>
        <strong>Remaining number of tickets you can buy:</strong> @remainingAllowed
        @if (remainingAllowed == 0)
        {
            <span class="text-danger ms-2"> - You already own the maximum (5).</span>
        }
    </p>

    <button class="btn btn-primary"
            @onclick="ConfirmPurchase"
            disabled="@(newlySelected == 0 || newlySelected > remainingAllowed)">
        Buy Tickets
    </button>
}

@code {
    [Parameter] public int FestivalId { get; set; }

    private List<TicketGetDto> ticketTypes = new();
    private Dictionary<int, int> quantities = new();
    private int newlySelected => quantities.Values.Sum();

    private int alreadyOwned;
    private int remainingAllowed => Math.Max(0, 5 - alreadyOwned);
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            string? idClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            userId = int.TryParse(idClaim, out var id) ? id : 0;
        }

        var myBookings = await BookingService.GetBookingsByUserIdAsync(userId);
        alreadyOwned = myBookings.Count(b => b.FestivalId == FestivalId);
    }

    protected override async Task OnParametersSetAsync()
    {
        ticketTypes = (await TicketService.GetTicketsByFestivalIdAsync(FestivalId))
                  .ToList();

        foreach (var t in ticketTypes)
        {
            quantities[t.Id] = 0;
        }
    }

    private async Task ConfirmPurchase()
    {
        if (newlySelected == 0 || newlySelected > remainingAllowed) return;

        var ok = await JS.InvokeAsync<bool>(
            "confirm",
            $"Are you sure you want to buy {newlySelected} additional ticket(s)?");
        if (!ok) return;

        var now = DateTime.UtcNow;
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = int.Parse(state.User.FindFirst(ClaimTypes.NameIdentifier)!.Value);

        foreach (var kv in quantities)
        {
            for (int i = 0; i < kv.Value; i++)
            {
                await BookingService.AddBookingAsync(new BookingCreateDto
                {
                    UserId = userId,
                    FestivalId = FestivalId,
                    TicketId = kv.Key,
                    BookingTime = now
                });
            }
        }

        Nav.NavigateTo("/mybookings", forceLoad: true);
    }
}
