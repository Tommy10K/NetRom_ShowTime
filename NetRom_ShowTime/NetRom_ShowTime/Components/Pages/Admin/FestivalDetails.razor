@page "/festivals_admin/{Id:int}"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using NetRom_ShowTime.Components
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization

@inject IFestivalService FestivalService
@inject ITicketService TicketService
@inject NavigationManager Nav

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<h3>Festival Details</h3>

@if (festival is null)
{
    <p><em>Loading…</em></p>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-md-5 mb-4">
                <div class="card h-120">
                    <div class="ratio" style="--bs-aspect-ratio:130%;">
                        <img src="@festival.SplashArt"
                             class="card-img-top"
                             style="object-fit: cover;"
                             alt="@festival.Name" />
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-7 mb-4">
                <div class="card h-120">
                    <div class="card-body">
                        <h3 class="card-title">@festival.Name</h3>
                        <p class="card-text"><strong>Location:</strong> @festival.Location</p>
                        <p class="card-text mb-1">
                            <strong>Start Date:</strong> @festival.StartDate:yyyy-MM-dd
                        </p>
                        <p class="card-text mb-3">
                            <strong>End Date:</strong> @festival.EndDate:yyyy-MM-dd
                        </p>
                        <p class="card-text"><strong>Capacity:</strong> @festival.Capacity</p>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5>Ticket Types</h5>
                            @if (ticketTypes == null)
                            {
                                <p><em>Loading…</em></p>
                            }
                            else if (!ticketTypes.Any())
                            {
                                <p><em>No ticket types yet.</em></p>
                            }
                            else
                            {
                                <ul class="list-group mb-3">
                                    @foreach (var t in ticketTypes)
                                    {
                                        <li class="list-group-item d-flex justify-content-between">
                                            <span>
                                                <strong>@t.Name</strong> : @t.Price$ | Quantity: @t.Quantity
                                            </span>
                                        </li>
                                    }
                                </ul>
                            }

                            <button class="btn btn-sm btn-success mb-2"
                                    @onclick="() => showAddForm = true"
                                    disabled="@(showAddForm)">
                                Add Ticket Type
                            </button>

                            @if (showAddForm)
                            {
                                <EditForm Model="newTicket" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-2">
                                        <label class="form-label">Name</label>
                                        <InputText class="form-control" @bind-Value="newTicket.Name" />
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Price</label>
                                        <InputNumber class="form-control" @bind-Value="newTicket.Price" />
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Quantity</label>
                                        <InputNumber class="form-control" @bind-Value="newTicket.Quantity" />
                                    </div>

                                    <button type="submit" class="btn btn-primary btn-sm me-2">Save</button>
                                    <button type="button"
                                            class="btn btn-secondary btn-sm"
                                            @onclick="() => { showAddForm = false; newTicket = new(); }">
                                        Cancel
                                    </button>
                                </EditForm>
                            }
                        </div>
                    </div>

                    <button class="btn btn-secondary"
                            @onclick='() => Nav.NavigateTo("/festivals_admin")'>
                        Back to list
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (!isEditing)
    {
        <div class="d-flex gap-3 mb-4">
            <button class="btn btn-primary" @onclick="EnableEdit">Edit</button>
            <button class="btn btn-danger" @onclick="DeleteFestival">Delete</button>
        </div>
    }
    else
    {
        <EditForm Model="editFestival" OnValidSubmit="SaveEdit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText @bind-Value="editFestival.Name" class="form-control" />
                <ValidationMessage For="@(() => editFestival.Name)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Location</label>
                <InputText @bind-Value="editFestival.Location" class="form-control" />
                <ValidationMessage For="@(() => editFestival.Location)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Start Date</label>
                <InputDate @bind-Value="editFestival.StartDate"
                           class="form-control" />
                <ValidationMessage For="@(() => editFestival.StartDate)" />
            </div>
            <div class="mb-3">
                <label class="form-label">End Date</label>
                <InputDate @bind-Value="editFestival.EndDate"
                           class="form-control" />
                <ValidationMessage For="@(() => editFestival.EndDate)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Splash Art URL</label>
                <InputText @bind-Value="editFestival.SplashArt" class="form-control" />
                <ValidationMessage For="@(() => editFestival.SplashArt)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Capacity</label>
                <InputNumber @bind-Value="editFestival.Capacity" class="form-control" />
                <ValidationMessage For="@(() => editFestival.Capacity)" />
            </div>

            <div class="d-flex gap-3">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </div>
        </EditForm>
    }
}

@code {
    [Parameter] public int Id { get; set; }

    private FestivalGetDto? festival;
    private FestivalUpdateDto editFestival = new();
    private bool isEditing;
    private List<TicketGetDto> ticketTypes = new();
    private bool showAddForm;
    private TicketCreateDto newTicket = new();

    protected override async Task OnInitializedAsync()
    {
        festival = await FestivalService.GetFestivalByIdAsync(Id);
        if (festival is null)
            Nav.NavigateTo("/festivals");
    }

    protected override async Task OnParametersSetAsync()
    {
        festival    = await FestivalService.GetFestivalByIdAsync(Id);
        ticketTypes = (await TicketService.GetTicketsByFestivalIdAsync(Id))
            .Select(t => new TicketGetDto {
                Id         = t.Id,
                Name       = t.Name,
                Price      = t.Price,
                Quantity   = t.Quantity
            })
            .ToList();
    }

     private async Task HandleValidSubmit()
    {
        newTicket.FestivalId = Id;

        await TicketService.AddTicketAsync(newTicket);
        ticketTypes = (await TicketService.GetTicketsByFestivalIdAsync(Id)).ToList();

        newTicket   = new();
        showAddForm = false;
    }

    private void EnableEdit()
    {
        if (festival == null) return;
        isEditing = true;
        editFestival = new FestivalUpdateDto
        {
            Id = festival.Id,
            Name = festival.Name,
            Location = festival.Location,
            StartDate = festival.StartDate,
            EndDate = festival.EndDate,
            SplashArt = festival.SplashArt,
            Capacity = festival.Capacity
        };
    }

    private async Task SaveEdit()
    {
        await FestivalService.UpdateFestivalAsync(editFestival);
        festival = await FestivalService.GetFestivalByIdAsync(Id);
        isEditing = false;
    }

    private void CancelEdit() => isEditing = false;

    private async Task DeleteFestival()
    {
        await FestivalService.DeleteFestivalAsync(Id);
        Nav.NavigateTo("/festivals");
    }
}
