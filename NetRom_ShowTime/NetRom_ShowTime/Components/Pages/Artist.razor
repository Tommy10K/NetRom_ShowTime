@page "/artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IArtistService ArtistService

<h3>Add new artist</h3>
<EditForm Model="newArtist" OnValidSubmit="AddArtist" FormName="Add Artist Form">
    <label for="name">Name:</label>
    <InputText id="name" @bind-Value="newArtist.Name" class="form-control mb-2" />

    <label for="genre">Genre:</label>
    <InputText id="genre" @bind-Value="newArtist.Genre" class="form-control mb-2" />

    <label for="image">Image:</label>
    <InputText id="image" @bind-Value="newArtist.Image" class="form-control mb-2" />

    <button type="submit" class="btn btn-primary mt-2 mb-3">Submit</button>
</EditForm>

<h3>Artist</h3>

@if (artists.Count == 0)
{
    <p>No artists registered</p>
}
else
{
    <div class="row">
        @foreach (var artist in artists)
        {
            <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                <div class="card h-80">
                    <div class="ratio" style="--bs-aspect-ratio:125%;">
                        <img src="@artist.Image"
                             alt="@artist.Name"
                             class="card-img-top"
                             style="object-fit: cover;" />
                    </div>

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title mb-1">@artist.Name</h5>
                        <p class="card-text text-muted mb-3">@artist.Genre</p>

                        <button type="button"
                                class="btn btn-sm btn-danger mt-auto"
                                @onclick="async () => await DeleteArtist(artist.Id)">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    [SupplyParameterFromForm]
    private ArtistCreateDto newArtist { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task AddArtist()
    {
        if (string.IsNullOrWhiteSpace(newArtist.Name) || string.IsNullOrWhiteSpace(newArtist.Genre) || string.IsNullOrWhiteSpace(newArtist.Image))
        {
            return;
        }
        await ArtistService.AddArtistAsync(newArtist);
        newArtist = new();
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task DeleteArtist(int id)
    {
        Console.WriteLine($"Deleting artist {id}…");
        await ArtistService.DeleteArtistAsync(id);
        Console.WriteLine("Deleted. Reloading list…");
        artists = await ArtistService.GetAllArtistsAsync();
    }
}
