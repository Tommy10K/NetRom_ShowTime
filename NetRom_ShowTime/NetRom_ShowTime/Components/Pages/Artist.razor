@page "/artist"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IArtistService ArtistService

<h3>Add new artist</h3>
<EditForm Model="newArtist" OnValidSubmit="AddArtist" FormName="Add Artist Form">
    <label>Name: </label>
    <InputText @bind-Value="newArtist.Name"></InputText>

    <label>Genre: </label>
    <InputText @bind-Value="newArtist.Genre"></InputText>

    <label>Image: </label>
    <InputText @bind-Value="newArtist.Image"></InputText>

    <button class="">Submit</button>
</EditForm>

<h3>Artist</h3>

@if (artists.Count == 0)
{
    <p>No artists registered</p>
}

else
{
    <div class="row">
        @foreach (var artist in artists)
        {
            <p>@artist.Name</p>
            <p>@artist.Genre</p>
            <img src="@artist.Image" alt="@artist.Name" />
        }
    </div>
}

@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    [SupplyParameterFromForm]
    private ArtistCreateDto newArtist { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task AddArtist()
    {
        if (string.IsNullOrWhiteSpace(newArtist.Name) || string.IsNullOrWhiteSpace(newArtist.Genre) || string.IsNullOrWhiteSpace(newArtist.Image))
        {
            return;
        }
        await ArtistService.AddArtistAsync(newArtist);
        newArtist = new();
        artists = await ArtistService.GetAllArtistsAsync();
        
    }
}
