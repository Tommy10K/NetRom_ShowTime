@page "/festivals/{Id:int}"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization

@inject IFestivalService FestivalService
@inject ILineupService LineupService
@inject IArtistService ArtistService
@inject NavigationManager Nav

@rendermode InteractiveServer

@attribute [Authorize(Roles = "User,Admin")]

@if (festival == null)
{
    <p><em>Loading…</em></p>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-md-5 mb-4">
                <div class="card h-120">
                    <div class="ratio" style="--bs-aspect-ratio:130%;">
                        <img src="@festival.SplashArt"
                             class="card-img-top"
                             style="object-fit: cover;"
                             alt="@festival.Name" />
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-7 mb-4">
                <div class="card h-120">
                    <div class="card-body">
                        <h3 class="card-title">@festival.Name</h3>
                        <p class="card-text"><strong>Location:</strong> @festival.Location</p>
                        <p class="card-text mb-1">
                            <strong>Start Date:</strong> @festival.StartDate.ToString("yyyy-MM-dd")
                        </p>
                        <p class="card-text mb-3">
                            <strong>End Date:</strong> @festival.EndDate.ToString("yyyy-MM-dd")
                        </p>
                        <button class="btn btn-secondary"
                                @onclick='() => Nav.NavigateTo("/festivals")'>
                            Back to Festivals
                        </button>
                        <button class="btn btn-success"
                                @onclick='() => Nav.NavigateTo($"/buytickets/{festival.Id}")'>
                            Get Tickets
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <h4>Line-up</h4>

    @if (lineupItems == null)
    {
        <p><em>Loading lineup…</em></p>
    }
    else if (!lineupItems.Any())
    {
        <p>No artists scheduled yet.</p>
    }
    else
    {
        <div class="row">
            @foreach (var item in lineupItems)
            {
                <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-80">
                        <div class="ratio" style="--bs-aspect-ratio:125%;">
                            <img src="@item.Artist.Image"
                                 alt="@item.Artist.Name"
                                 class="card-img-top"
                                 style="object-fit: cover;" />
                        </div>

                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title mb-1">@item.Artist.Name</h5>
                            <p class="card-text mb-1">
                                <strong>Stage:</strong> @item.Line.Stage
                            </p>
                            <p class="card-text mt-auto">
                                <strong>When:</strong>
                                @item.Line.StartTime.ToString("HH:mm 'on' dd.MM.yyyy")
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

}

@code {
    [Parameter] public int Id { get; set; }

    private FestivalGetDto? festival;
    private List<(LineupGetDto Line, ArtistGetDto Artist)>? lineupItems;

    protected override async Task OnInitializedAsync()
    {
        festival = await FestivalService.GetFestivalByIdAsync(Id);
        if (festival is null)
            Nav.NavigateTo("/festivals");

        var lines = await LineupService.GetLineupsByFestivalIdAsync(Id);

        var artistIds = lines.Select(l => l.ArtistId).Distinct();
        var artists = new List<ArtistGetDto>();
        foreach (var id in artistIds)
        {
            var a = await ArtistService.GetArtistByIdAsync(id);
            if (a != null) artists.Add(a);
        }

        lineupItems = lines
            .OrderBy(l => l.StartTime)
            .Select(l =>
            {
                var art = artists.First(a => a.Id == l.ArtistId);
                return (Line: l, Artist: art);
            })
            .ToList();
    }
}

